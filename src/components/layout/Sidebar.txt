import React, { useState } from "react";
import useUserStore from "../store/useUserStore";
import {
  Drawer,
  List,
  ListItem,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  Toolbar,
  Collapse,
} from "@mui/material";
import {
  Dashboard as DashboardIcon,
  ExpandLess,
  ExpandMore,
} from "@mui/icons-material";
import PersonIcon from "@mui/icons-material/Person";
import { Link, useLocation } from "react-router-dom";
import HowToRegIcon from "@mui/icons-material/HowToReg";

const fullDrawerWidth = 240;
const collapsedDrawerWidth = 60;
const { userRights } = useUserStore();

const menuItems = [
  {
    label: "Dashboard",
    href: "/dashboard",
    icon: <DashboardIcon />,
  },
  {
    label: "Users",
    href: "/user",
    icon: <PersonIcon />,
  },
  {
    label: "Candidates",
    href: "/candidate",
    icon: <HowToRegIcon />,
  },

  // {
  //   label: "Restaurant",
  //   icon: <RestaurantIcon />,
  //   children: [
  //     { label: "Restaurant", href: "/admin/restaurants" },
  //     { label: "Request", href: "/admin/restaurants/restaurant_request" },
  //     { label: "Review", href: "/admin/restaurants/restaurants_review" },
  //   ],
  // },
  // {
  //   label: "Payments",
  //   icon: <PaymentsIcon />,
  //   children: [
  //     { label: "Main", href: "/admin/payments" },
  //     { label: "Sub Page", href: "/admin/payments/subpage" },
  //   ],
  // },
];

export default function Sidebar({ isDrawerOpen }) {
  const location = useLocation();
  const [openMenus, setOpenMenus] = useState({});

  const handleToggleMenu = (label) => {
    setOpenMenus((prev) => ({
      ...prev,
      [label]: !prev[label],
    }));
  };

  const isSelected = (href) => location.pathname === href;
  const isChildSelected = (children) =>
    children?.some((child) => location.pathname === child.href);

  return (
    <Drawer
      variant="permanent"
      sx={{
        width: isDrawerOpen ? fullDrawerWidth : collapsedDrawerWidth,
        flexShrink: 0,
        "& .MuiDrawer-paper": {
          width: isDrawerOpen ? fullDrawerWidth : collapsedDrawerWidth,
          boxSizing: "border-box",
          backgroundColor: "#0f172a",
          color: "white",
          transition: "width 0.3s",
        },
      }}
    >
      <Toolbar />
      <List>
        {menuItems.map((item) => (
          <React.Fragment key={item.label}>
            <ListItem disablePadding>
              <ListItemButton
                component={item.href ? Link : "button"}
                to={item.href}
                onClick={() =>
                  item.children && isDrawerOpen && handleToggleMenu(item.label)
                }
                sx={{
                  backgroundColor:
                    isSelected(item.href) ||
                    (item.children && isChildSelected(item.children))
                      ? "rgba(255, 255, 255, 0.1)"
                      : "transparent",
                  "&:hover": {
                    backgroundColor: "rgba(255, 255, 255, 0.2)",
                  },
                  justifyContent: isDrawerOpen ? "initial" : "center",
                  px: isDrawerOpen ? 2.5 : 1,
                }}
              >
                <ListItemIcon
                  sx={{
                    color: "white",
                    minWidth: isDrawerOpen ? 56 : 40,
                  }}
                >
                  {item.icon}
                </ListItemIcon>
                {isDrawerOpen && <ListItemText primary={item.label} />}
                {item.children &&
                  isDrawerOpen &&
                  (openMenus[item.label] ? <ExpandLess /> : <ExpandMore />)}
              </ListItemButton>
            </ListItem>
            {item.children && isDrawerOpen && (
              <Collapse in={openMenus[item.label]} timeout="auto" unmountOnExit>
                <List component="div" disablePadding>
                  {item.children.map((child) => (
                    <ListItem key={child.label} disablePadding sx={{ pl: 4 }}>
                      <ListItemButton
                        component={Link}
                        to={child.href}
                        sx={{
                          backgroundColor: isSelected(child.href)
                            ? "rgba(255, 255, 255, 0.1)"
                            : "transparent",
                          "&:hover": {
                            backgroundColor: "rgba(255, 255, 255, 0.2)",
                          },
                        }}
                      >
                        <ListItemText primary={child.label} />
                      </ListItemButton>
                    </ListItem>
                  ))}
                </List>
              </Collapse>
            )}
          </React.Fragment>
        ))}
      </List>
    </Drawer>
  );
}
