
from fastapi import APIRouter, Depends, HTTPException, Body
from sqlalchemy.orm import Session
from app.schemas.user_schema import UserCreate, UserResponse, AccessToken, UserLogin
from app.controllers import user_controller
from app.database.session import SessionLocal
from passlib.context import CryptContext
from datetime import timedelta, datetime
from app.dependencies.auth import verify_access_token
from app.schemas.token_schema import TokenLogout
from fastapi.responses import JSONResponse
from app.utils.token import verify_token
from app.models.user_model import UserSession


router = APIRouter(prefix="/user", tags=["Users"])

bcrypt_context = CryptContext(schemes=['bcrypt'], deprecated = 'auto')


def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


#get all user
@router.get("/", response_model=list[UserResponse])
def get_users(db: Session = Depends(get_db), current_user_id: int = Depends(verify_access_token)):
    # Now the token is verified, and you can access current_user_id
    return user_controller.get_all(db)


# # create new user
@router.post("/", response_model=UserResponse)
def create_user(user: UserCreate, db: Session = Depends(get_db)):
    hashed_password = bcrypt_context.hash(user.password)

    user_data = {
        "name" : user.name,
        "email" : user.email,
        "password" : hashed_password
    }

    db_user = user_controller.create(db, user_data)
    return db_user
        

# # get user by id
# @router.get("/{user_id}", response_model=UserResponse)
# def get_user(user_id: int, db: Session = Depends(get_db)):
#     user = user_controller.get_by_id(db, user_id)
#     if not user:
#         raise HTTPException(status_code=404, detail="User not found")
#     return user

# # user login for get token
@router.post("/login", response_model=AccessToken)
def create_login(data: UserLogin, db: Session = Depends(get_db)):
    #Get user
    user = user_controller.get_by_email(data.email, db)
    if not user:
        raise HTTPException(status_code=404, detail="Email not found")
    
    #Verify password
    isMatch = user_controller.verify_password(data.password, user.password)
    if not isMatch:
        raise HTTPException(status_code=404, detail="User not found")
    
    access_token_expires = timedelta(minutes=2)
    now = datetime.now().replace(microsecond=0)


    #create access token
    access_token = user_controller.create_access_token(user.pk_id, expires_delta=access_token_expires)

    # check and update expiration data
    user_controller.check_expiration_date_token(user.pk_id, db)
    
    # Save access token
    user_controller.create_token(
        user_id=user.pk_id,
        access_token=access_token,
        expiration_date=(now + access_token_expires).strftime("%Y-%m-%d %H:%M:%S"),
        db=db
    )

    return AccessToken(
        access_token=access_token
    )

@router.post("/verify_token", response_model=bool)
def verify_token(token: str = Body(..., embed=True), db: Session = Depends(get_db)):
    token = user_controller.verify_refresh_token(token, db)
    return token


# # user logout
@router.post("/logout", response_model=bool)
def logout(access_token: str = Body(..., embed=True), db: Session = Depends(get_db)):
    return user_controller.check_token_when_logout(access_token, db)